# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Add to Cart
- Location: D:\DemoWebShopProject\tests\AddToCartPageTest.spec.js:6:5

# Error details

```
Error: locator.textContent: Test timeout of 30000ms exceeded.
Call log:
  - waiting for locator('//div[@class=\'page-title\']/h1')

    at AddToCartPage.getPageTitleHeading (D:\DemoWebShopProject\pages\AddToCartPage.js:72:39)
    at D:\DemoWebShopProject\tests\AddToCartPageTest.spec.js:23:5
```

# Page snapshot

```yaml
- link "Tricentis Demo Web Shop":
  - img "Tricentis Demo Web Shop"
- list:
  - listitem:
    - link "mrchetanade@gmail.com"
  - listitem:
    - link "Log out"
  - listitem:
    - link "Shopping cart (0)"
  - listitem:
    - link "Wishlist (0)"
- status
- textbox: Search store
- button "Search"
- list:
  - listitem:
    - link "Books"
  - listitem:
    - link "Computers"
  - listitem:
    - link "Electronics"
  - listitem:
    - link "Apparel & Shoes"
  - listitem:
    - link "Digital downloads"
  - listitem:
    - link "Jewelry"
  - listitem:
    - link "Gift Cards"
- strong: Categories
- list:
  - listitem:
    - link "Books"
  - listitem:
    - link "Computers"
  - listitem:
    - link "Electronics"
  - listitem:
    - link "Apparel & Shoes"
  - listitem:
    - link "Digital downloads"
  - listitem:
    - link "Jewelry"
  - listitem:
    - link "Gift Cards"
- strong: Manufacturers
- list:
  - listitem:
    - link "Tricentis"
- strong: Newsletter
- text: "Sign up for our newsletter:"
- textbox
- button "Subscribe"
- list:
  - listitem:
    - link "Home"
    - text: /
  - listitem:
    - link "Apparel & Shoes"
    - text: /
  - listitem:
    - strong: 50's Rockabilly Polka Dot Top JR Plus Size
- img "Picture of 50's Rockabilly Polka Dot Top JR Plus Size"
- heading "50's Rockabilly Polka Dot Top JR Plus Size" [level=1]
- text: "Availability: In stock"
- link "522 review(s)"
- text: "|"
- link "Add your review"
- term: Size *
- definition:
  - combobox:
    - option "Small" [selected]
    - option "1X [+2.00]"
    - option "2X"
    - option "3X"
    - option "4X"
    - option "5X"
- text: "11.00 Qty:"
- textbox "Qty:": "1"
- button "Add to cart"
- button "Add to wishlist"
- button "Email a friend"
- button "Add to compare list"
- paragraph: Fitted polkadot print cotton top with tie cap sleeves.
- strong: Product tags
- list:
  - listitem:
    - link "cool"
    - text: (17)
  - listitem: ","
  - listitem:
    - link "apparel"
    - text: (12)
  - listitem: ","
  - listitem:
    - link "shirt"
    - text: (3)
  - listitem: ","
  - listitem:
    - link "awesome"
    - text: (20)
- strong: Customers who bought this item also bought
- link "Picture of Simple Computer":
  - img "Picture of Simple Computer"
- heading "Simple Computer" [level=2]:
  - link "Simple Computer"
- text: "800.00"
- button "Add to cart"
- link "Picture of Blue and green Sneaker":
  - img "Picture of Blue and green Sneaker"
- heading "Blue and green Sneaker" [level=2]:
  - link "Blue and green Sneaker"
- text: "11.00"
- button "Add to cart"
- link "Picture of Phone Cover":
  - img "Picture of Phone Cover"
- heading "Phone Cover" [level=2]:
  - link "Phone Cover"
- text: "10.00"
- button "Add to cart"
- heading "Information" [level=3]
- list:
  - listitem:
    - link "Sitemap"
  - listitem:
    - link "Shipping & Returns"
  - listitem:
    - link "Privacy Notice"
  - listitem:
    - link "Conditions of Use"
  - listitem:
    - link "About us"
  - listitem:
    - link "Contact us"
- heading "Customer service" [level=3]
- list:
  - listitem:
    - link "Search"
  - listitem:
    - link "News"
  - listitem:
    - link "Blog"
  - listitem:
    - link "Recently viewed products"
  - listitem:
    - link "Compare products list"
  - listitem:
    - link "New products"
- heading "My account" [level=3]
- list:
  - listitem:
    - link "My account"
  - listitem:
    - link "Orders"
  - listitem:
    - link "Addresses"
  - listitem:
    - link "Shopping cart"
  - listitem:
    - link "Wishlist"
- heading "Follow us" [level=3]
- list:
  - listitem:
    - link "Facebook"
  - listitem:
    - link "Twitter"
  - listitem:
    - link "RSS"
  - listitem:
    - link "YouTube"
  - listitem:
    - link "Google+"
- text: Powered by
- link "nopCommerce"
- text: Copyright © 2025 Tricentis Demo Web Shop. All rights reserved.
```

# Test source

```ts
   1 | exports.AddToCartPage = class AddToCartPage{
   2 |
   3 |     constructor(page)
   4 |     {
   5 |         this.page = page;
   6 |         this.headerMenu = "//div[@class='header-menu']/ul/li/a";
   7 |         this.camera = "//h2/a[contains(text(),'Camera')]";
   8 |         this.cell = "//h2/a[contains(text(),'cell')]";
   9 |         this.heading = "//h1";
   10 |         this.elctronicsList = "//h2[@class='title']";
   11 |         this.pageHeading = "//div[@class='page-title']/h1";
   12 |         this.totalCameraAssests = "//div[@class='product-grid']/div";
   13 |         this.totalApprail = "//h2[@class='product-title']/a";
   14 |
   15 |
   16 |
   17 |     }
   18 |
   19 |     async selectTheHeaderMenu(HeaderName)
   20 |     {
   21 |         const HeaderMenuList = await this.page.$$(this.headerMenu);
   22 |         //const menuList = await HeaderMenuList.count();
   23 |         //console.log(menuList);
   24 |
   25 |         for (const menu of HeaderMenuList)
   26 |         {
   27 |             //console.log(await menu.textContent());
   28 |             //console.log("Total item list : ", await menu.count());
   29 |            
   30 |             const value = await menu.textContent();
   31 |             console.log(value);
   32 |
   33 |             if(value.includes(HeaderName))
   34 |             {
   35 |                 await Promise.all([
   36 |                     this.page.waitForNavigation(), // ✅ waits for navigation safely
   37 |                     menu.click()
   38 |                 ]);
   39 |                 console.log("item selected");
   40 |                 break; // stop after clicking
   41 |             }
   42 |                 
   43 |
   44 |         }
   45 |
   46 |     }
   47 |
   48 |     async getPageTitle()
   49 |     {
   50 |         const title = await this.page.title();
   51 |         console.log("the page title is :", title);
   52 |     }
   53 |
   54 |     async selectTheElectronicsList()
   55 |     {
   56 |         const EleList = await this.page.locator("//h2[@class='title']");
   57 |         const count = await EleList.count();
   58 |         console.log("Number of electronics items:", count);
   59 |  
   60 |     }
   61 |
   62 |     async clickOnCameraItem()
   63 |     {
   64 |         const camera = await this.page.locator(this.camera);
   65 |         await camera.click();
   66 |         console.log("camera item selected");
   67 |     }
   68 |
   69 |     async getPageTitleHeading()
   70 |     {
   71 |         const pageHeading = await this.page.locator(this.pageHeading);
>  72 |         console.log(await pageHeading.textContent());
      |                                       ^ Error: locator.textContent: Test timeout of 30000ms exceeded.
   73 |         const text = await pageHeading.textContent();
   74 |         
   75 |         if (text) {
   76 |             console.log(text.trim());
   77 |         } else {
   78 |             console.log("Element not found or textContent is null");
   79 |         }
   80 |
   81 |     }
   82 |
   83 |     async selectTheCamerasProduct()
   84 |     {
   85 |         const cam = await this.page.locator(this.totalCameraAssests);
   86 |         const camAsset = await this.page.$$(this.totalCameraAssests);
   87 |         console.log(await cam.count());
   88 |         const camList = await cam.allTextContents();
   89 |         console.log(camList);
   90 |
   91 |         for (const text of camList) {
   92 |             console.log(text.trim());
   93 |         }
   94 |
   95 |         for(const option of camAsset)
   96 |         {
   97 |             const value = await option.textContent();
   98 |             console.log(value);
   99 |         
  100 |
  101 |         if(value.includes("Camcorder"))
  102 |             {
  103 |             
  104 |                 await option.click();
  105 |                 console.log("camcorder clicked")
  106 |                 break;
  107 |             
  108 |             
  109 |             }
  110 |         }
  111 |     }
  112 |
  113 |     async clickOnPolkaDotTopProduct()
  114 |     {
  115 |         const totalProduct = await this.page.locator(this.totalApprail);
  116 |         console.log(await totalProduct.count());
  117 |         const prod =await totalProduct.allTextContents();
  118 |         console.log(prod);
  119 |
  120 |         const totalProduct1 = await this.page.$$(this.totalApprail);
  121 |
  122 |         for(const option of totalProduct1)
  123 |         {
  124 |             const value = await option.textContent();
  125 |             console.log(value);
  126 |
  127 |             if(value.includes("Polka"))
  128 |             {
  129 |                 await option.click();
  130 |                 console.log("options clicked");
  131 |                 break;
  132 |             }
  133 |         }
  134 |     }
  135 | }
```